{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/types/index.ts"],"sourcesContent":["export type Square = {\n  row: number;\n  col: number;\n  piece?: Piece;\n};\n\nexport type Piece = {\n  id: string;\n  player: Player;\n  type: PieceType;\n  color: PlayerColor;\n  currentSquare: Square;\n  movementStrategy: MovementStrategy;\n  isAlive: boolean;\n  hasMoved?: boolean;\n};\n\nexport interface MovementStrategy {\n  (\n    board: Square[][],\n    piece: Piece,\n    isBoardFlipped?: boolean,\n    moveHistory?: Move[]\n  ): Move[];\n}\n\nexport enum PieceType {\n  PAWN = \"pawn\",\n  ROOK = \"rook\",\n  KNIGHT = \"knight\",\n  BISHOP = \"bishop\",\n  QUEEN = \"queen\",\n  KING = \"king\",\n}\n\nexport type Player = {\n  color: PlayerColor;\n  type: PlayerType;\n};\n\nexport enum PlayerColor {\n  WHITE = \"white\",\n  BLACK = \"black\",\n}\n\nexport enum PlayerType {\n  HUMAN = \"Human\",\n  COMPUTER = \"Computer\",\n}\n\nexport type GameState = {\n  board: Square[][];\n  players: Player[];\n  piecesByPlayer: Map<Player, Piece[]>;\n  currentPlayerIndex: number;\n  currentPlayerMoves: Move[];\n  capturedPieces: Piece[];\n  kingSquare: Square | undefined;\n  isKingInCheck: boolean;\n  moveHistory: Move[];\n  undoneMoves: Move[];\n  halfMoveClock: number;\n  fullMoveNumber: number;\n};\n\nexport enum MoveType {\n  STNDRD = \"Standard\",\n  CASTLE = \"Castling\",\n  EP = \"EnPassant\",\n  PROMO = \"Promotion\",\n}\n\nexport interface Move {\n  type: MoveType;\n  from: Square;\n  to: Square;\n  piece: Piece;\n  capturedPiece?: Piece;\n  isPromotion?: boolean;\n  isCapture?: boolean;\n}\n\nexport interface CastlingMove extends Move {\n  rook: Piece;\n  kingFrom: Square;\n  kingTo: Square;\n  rookFrom: Square;\n  rookTo: Square;\n}\n\nexport interface EnPassantMove extends Move {\n  capturedPieceSquare: Square;\n}\n\nexport interface PromotionMove extends Move {\n  promotionType: PieceType;\n}\n"],"names":[],"mappings":";;;;;;AA0BO,IAAA,AAAK,mCAAA;;;;;;;WAAA;;AAcL,IAAA,AAAK,qCAAA;;;WAAA;;AAKL,IAAA,AAAK,oCAAA;;;WAAA;;AAoBL,IAAA,AAAK,kCAAA;;;;;WAAA"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/square.ts"],"sourcesContent":["import { Piece, Square } from \"../types\";\n\nexport const createSquare = (\n  row: number,\n  col: number,\n  piece?: Piece\n): Square => ({\n  row,\n  col,\n  piece,\n});\n"],"names":[],"mappings":";;;AAEO,MAAM,eAAe,CAC1B,KACA,KACA,QACW,CAAC;QACZ;QACA;QACA;IACF,CAAC"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/move.ts"],"sourcesContent":["import {\n  Move,\n  EnPassantMove,\n  CastlingMove,\n  PromotionMove,\n  MoveType,\n  Piece,\n  PieceType,\n  Square,\n} from \"../types\";\n\nexport const createStandardMove = (\n  piece: Piece,\n  from: Square,\n  to: Square,\n  capturedPiece?: Piece,\n  isCapture?: boolean\n): Move => ({\n  type: MoveType.STNDRD,\n  from,\n  to,\n  capturedPiece,\n  piece,\n  isCapture,\n});\n\nexport const createCastlingMove = (\n  king: Piece,\n  rook: Piece,\n  kingFrom: Square,\n  kingTo: Square,\n  rookFrom: Square,\n  rookTo: Square\n): CastlingMove => ({\n  type: MoveType.CASTLE,\n  from: kingFrom,\n  to: kingTo,\n  capturedPiece: undefined,\n  piece: king,\n  rook: rook,\n  isCapture: false,\n  kingFrom,\n  kingTo,\n  rookFrom,\n  rookTo,\n});\n\nexport const createEnPassantMove = (\n  piece: Piece,\n  from: Square,\n  to: Square,\n  capturedPieceSquare: Square,\n  capturedPiece: Piece\n): EnPassantMove => ({\n  type: MoveType.EP,\n  piece: piece,\n  from: from,\n  to: to,\n  capturedPieceSquare: capturedPieceSquare,\n  capturedPiece: capturedPiece,\n});\n\nexport const createPromotionMove = (\n  piece: Piece,\n  from: Square,\n  to: Square,\n  promotionType: PieceType,\n  capturedPiece?: Piece\n): PromotionMove => ({\n  type: MoveType.PROMO,\n  piece: piece,\n  from: from,\n  to: to,\n  promotionType: promotionType,\n  capturedPiece: capturedPiece,\n});\n"],"names":[],"mappings":";;;;;;AAAA;;AAWO,MAAM,qBAAqB,CAChC,OACA,MACA,IACA,eACA,YACS,CAAC;QACV,MAAM,oJAAA,CAAA,WAAQ,CAAC,MAAM;QACrB;QACA;QACA;QACA;QACA;IACF,CAAC;AAEM,MAAM,qBAAqB,CAChC,MACA,MACA,UACA,QACA,UACA,SACiB,CAAC;QAClB,MAAM,oJAAA,CAAA,WAAQ,CAAC,MAAM;QACrB,MAAM;QACN,IAAI;QACJ,eAAe;QACf,OAAO;QACP,MAAM;QACN,WAAW;QACX;QACA;QACA;QACA;IACF,CAAC;AAEM,MAAM,sBAAsB,CACjC,OACA,MACA,IACA,qBACA,gBACkB,CAAC;QACnB,MAAM,oJAAA,CAAA,WAAQ,CAAC,EAAE;QACjB,OAAO;QACP,MAAM;QACN,IAAI;QACJ,qBAAqB;QACrB,eAAe;IACjB,CAAC;AAEM,MAAM,sBAAsB,CACjC,OACA,MACA,IACA,eACA,gBACkB,CAAC;QACnB,MAAM,oJAAA,CAAA,WAAQ,CAAC,KAAK;QACpB,OAAO;QACP,MAAM;QACN,IAAI;QACJ,eAAe;QACf,eAAe;IACjB,CAAC"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/strategies/bishopMovementStrategy.ts"],"sourcesContent":["import { Move, MovementStrategy } from \"../../types\";\nimport { createSquare, createStandardMove, getPieceAt } from \"../index\";\n\nexport const bishopMovementStrategy: MovementStrategy = (board, piece) => {\n  let legalMoves: Move[] = [];\n  let row = piece.currentSquare.row;\n  let col = piece.currentSquare.col;\n\n  const directions = [\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1],\n  ];\n\n  directions.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n\n    while (newRow >= 0 && newRow <= 7 && newCol >= 0 && newCol <= 7) {\n      const targetSquare = createSquare(newRow, newCol, piece);\n      const targetPiece = getPieceAt(board, newRow, newCol);\n      const capturedPiece =\n        targetPiece && targetPiece.color !== piece.color\n          ? targetPiece\n          : undefined;\n      if (targetPiece && targetPiece.color === piece.color) {\n        break;\n      }\n      legalMoves.push(\n        createStandardMove(\n          piece,\n          piece.currentSquare,\n          targetSquare,\n          capturedPiece\n        )\n      );\n      if (capturedPiece) {\n        break;\n      }\n\n      newRow += dRow;\n      newCol += dCol;\n    }\n  });\n  return legalMoves;\n};\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;;AAEO,MAAM,yBAA2C,CAAC,OAAO;IAC9D,IAAI,aAAqB,EAAE;IAC3B,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IACjC,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IAEjC,MAAM,aAAa;QACjB;YAAC;YAAG;SAAE;QACN;YAAC;YAAG,CAAC;SAAE;QACP;YAAC,CAAC;YAAG,CAAC;SAAE;QACR;YAAC,CAAC;YAAG;SAAE;KACR;IAED,WAAW,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK;QAC9B,IAAI,SAAS,MAAM;QACnB,IAAI,SAAS,MAAM;QAEnB,MAAO,UAAU,KAAK,UAAU,KAAK,UAAU,KAAK,UAAU,EAAG;YAC/D,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,QAAQ;YAClD,MAAM,cAAc,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE,OAAO,QAAQ;YAC9C,MAAM,gBACJ,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,GAC5C,cACA;YACN,IAAI,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,EAAE;gBACpD;YACF;YACA,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,MAAM,aAAa,EACnB,cACA;YAGJ,IAAI,eAAe;gBACjB;YACF;YAEA,UAAU;YACV,UAAU;QACZ;IACF;IACA,OAAO;AACT"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/strategies/kingMovementStrategy.ts"],"sourcesContent":["import { MovementStrategy, Piece, Square, Move } from \"../../types\";\nimport {\n  createSquare,\n  createStandardMove,\n  createCastlingMove,\n  getPieceAt,\n} from \"../index\";\n\nexport const kingMovementStrategy: MovementStrategy = (\n  board,\n  piece,\n  isBoardFlipped\n) => {\n  const legalMoves: Move[] = [];\n  let row = piece.currentSquare.row;\n  let col = piece.currentSquare.col;\n\n  const directions = [\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1],\n  ];\n\n  const addCastlingMoves = (\n    board: Square[][],\n    king: Piece,\n    legalMoves: Move[]\n  ) => {\n    const rookPositions = isBoardFlipped\n      ? { kingSideRookCol: 0, queenSideRookCol: 7 }\n      : { kingSideRookCol: 7, queenSideRookCol: 0 };\n    const kingSideRook = getPieceAt(\n      board,\n      king.currentSquare.row,\n      rookPositions.kingSideRookCol\n    );\n    const queenSideRook = getPieceAt(\n      board,\n      king.currentSquare.row,\n      rookPositions.queenSideRookCol\n    );\n\n    if (kingSideRook && !kingSideRook.hasMoved && !king.hasMoved) {\n      legalMoves.push(\n        createCastlingMove(\n          king,\n          kingSideRook,\n          king.currentSquare,\n          createSquare(\n            king.currentSquare.row,\n            king.currentSquare.col + 2,\n            king\n          ),\n          kingSideRook.currentSquare,\n          createSquare(\n            kingSideRook.currentSquare.row,\n            kingSideRook.currentSquare.col - 2,\n            kingSideRook\n          )\n        )\n      );\n    }\n\n    if (queenSideRook && !queenSideRook.hasMoved && !king.hasMoved) {\n      legalMoves.push(\n        createCastlingMove(\n          king,\n          queenSideRook,\n          king.currentSquare,\n          createSquare(\n            king.currentSquare.row,\n            king.currentSquare.col - 2,\n            king\n          ),\n          queenSideRook.currentSquare,\n          createSquare(\n            queenSideRook.currentSquare.row,\n            queenSideRook.currentSquare.col + 3,\n            queenSideRook\n          )\n        )\n      );\n    }\n  };\n\n  directions.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      const targetSquare = createSquare(newRow, newCol, piece);\n      const targetPiece = getPieceAt(board, newRow, newCol);\n      const capturedPiece =\n        targetPiece && targetPiece.color !== piece.color\n          ? targetPiece\n          : undefined;\n      if (capturedPiece) {\n        legalMoves.push(\n          createStandardMove(\n            piece,\n            piece.currentSquare,\n            targetSquare,\n            capturedPiece\n          )\n        );\n      } else if (!targetPiece) {\n        legalMoves.push(\n          createStandardMove(piece, piece.currentSquare, targetSquare)\n        );\n      }\n    }\n  });\n  addCastlingMoves(board, piece, legalMoves);\n\n  return legalMoves;\n};\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;;AAOO,MAAM,uBAAyC,CACpD,OACA,OACA;IAEA,MAAM,aAAqB,EAAE;IAC7B,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IACjC,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IAEjC,MAAM,aAAa;QACjB;YAAC;YAAG;SAAE;QACN;YAAC;YAAG;SAAE;QACN;YAAC,CAAC;YAAG;SAAE;QACP;YAAC;YAAG,CAAC;SAAE;QACP;YAAC;YAAG;SAAE;QACN;YAAC;YAAG,CAAC;SAAE;QACP;YAAC,CAAC;YAAG;SAAE;QACP;YAAC,CAAC;YAAG,CAAC;SAAE;KACT;IAED,MAAM,mBAAmB,CACvB,OACA,MACA;QAEA,MAAM,gBAAgB,iBAClB;YAAE,iBAAiB;YAAG,kBAAkB;QAAE,IAC1C;YAAE,iBAAiB;YAAG,kBAAkB;QAAE;QAC9C,MAAM,eAAe,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAC5B,OACA,KAAK,aAAa,CAAC,GAAG,EACtB,cAAc,eAAe;QAE/B,MAAM,gBAAgB,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAC7B,OACA,KAAK,aAAa,CAAC,GAAG,EACtB,cAAc,gBAAgB;QAGhC,IAAI,gBAAgB,CAAC,aAAa,QAAQ,IAAI,CAAC,KAAK,QAAQ,EAAE;YAC5D,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,MACA,cACA,KAAK,aAAa,EAClB,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EACT,KAAK,aAAa,CAAC,GAAG,EACtB,KAAK,aAAa,CAAC,GAAG,GAAG,GACzB,OAEF,aAAa,aAAa,EAC1B,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EACT,aAAa,aAAa,CAAC,GAAG,EAC9B,aAAa,aAAa,CAAC,GAAG,GAAG,GACjC;QAIR;QAEA,IAAI,iBAAiB,CAAC,cAAc,QAAQ,IAAI,CAAC,KAAK,QAAQ,EAAE;YAC9D,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,MACA,eACA,KAAK,aAAa,EAClB,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EACT,KAAK,aAAa,CAAC,GAAG,EACtB,KAAK,aAAa,CAAC,GAAG,GAAG,GACzB,OAEF,cAAc,aAAa,EAC3B,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EACT,cAAc,aAAa,CAAC,GAAG,EAC/B,cAAc,aAAa,CAAC,GAAG,GAAG,GAClC;QAIR;IACF;IAEA,WAAW,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK;QAC9B,IAAI,SAAS,MAAM;QACnB,IAAI,SAAS,MAAM;QAEnB,IAAI,UAAU,KAAK,SAAS,KAAK,UAAU,KAAK,SAAS,GAAG;YAC1D,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,QAAQ;YAClD,MAAM,cAAc,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE,OAAO,QAAQ;YAC9C,MAAM,gBACJ,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,GAC5C,cACA;YACN,IAAI,eAAe;gBACjB,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,MAAM,aAAa,EACnB,cACA;YAGN,OAAO,IAAI,CAAC,aAAa;gBACvB,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EAAE,OAAO,MAAM,aAAa,EAAE;YAEnD;QACF;IACF;IACA,iBAAiB,OAAO,OAAO;IAE/B,OAAO;AACT"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/strategies/knightMovementStrategy.ts"],"sourcesContent":["import { MovementStrategy, Move } from \"../../types\";\nimport { createStandardMove, createSquare, getPieceAt } from \"../index\";\n\nexport const knightMovementStrategy: MovementStrategy = (board, piece) => {\n  let legalMoves: Move[] = [];\n  let row = piece.currentSquare.row;\n  let col = piece.currentSquare.col;\n\n  const knightMoves = [\n    [-2, 1],\n    [-1, 2],\n    [2, 1],\n    [1, 2],\n    [-2, -1],\n    [-1, -2],\n    [2, -1],\n    [1, -2],\n  ];\n\n  knightMoves.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      const targetSquare = createSquare(newRow, newCol, piece);\n      const targetPiece = getPieceAt(board, newRow, newCol);\n      const capturedPiece =\n        targetPiece && targetPiece.color !== piece.color\n          ? targetPiece\n          : undefined;\n      if (capturedPiece) {\n        legalMoves.push(\n          createStandardMove(\n            piece,\n            piece.currentSquare,\n            targetSquare,\n            capturedPiece\n          )\n        );\n      } else if (!targetPiece) {\n        legalMoves.push(\n          createStandardMove(piece, piece.currentSquare, targetSquare)\n        );\n      }\n    }\n  });\n\n  return legalMoves;\n};\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;;AAEO,MAAM,yBAA2C,CAAC,OAAO;IAC9D,IAAI,aAAqB,EAAE;IAC3B,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IACjC,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IAEjC,MAAM,cAAc;QAClB;YAAC,CAAC;YAAG;SAAE;QACP;YAAC,CAAC;YAAG;SAAE;QACP;YAAC;YAAG;SAAE;QACN;YAAC;YAAG;SAAE;QACN;YAAC,CAAC;YAAG,CAAC;SAAE;QACR;YAAC,CAAC;YAAG,CAAC;SAAE;QACR;YAAC;YAAG,CAAC;SAAE;QACP;YAAC;YAAG,CAAC;SAAE;KACR;IAED,YAAY,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK;QAC/B,IAAI,SAAS,MAAM;QACnB,IAAI,SAAS,MAAM;QACnB,IAAI,UAAU,KAAK,SAAS,KAAK,UAAU,KAAK,SAAS,GAAG;YAC1D,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,QAAQ;YAClD,MAAM,cAAc,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE,OAAO,QAAQ;YAC9C,MAAM,gBACJ,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,GAC5C,cACA;YACN,IAAI,eAAe;gBACjB,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,MAAM,aAAa,EACnB,cACA;YAGN,OAAO,IAAI,CAAC,aAAa;gBACvB,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EAAE,OAAO,MAAM,aAAa,EAAE;YAEnD;QACF;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/strategies/pawnMovementStrategy.ts"],"sourcesContent":["import {\n  Move,\n  MovementStrategy,\n  Piece,\n  Square,\n  PlayerColor,\n  PieceType,\n} from \"../../types\";\nimport {\n  createEnPassantMove,\n  createPromotionMove,\n  createSquare,\n  createStandardMove,\n  getPieceAt,\n  isEmpty,\n} from \"../index\";\n\nexport const pawnMovementStrategy: MovementStrategy = (\n  board,\n  piece,\n  isBoardFlipped,\n  moveHistory\n) => {\n  const legalMoves: Move[] = [];\n  const { row, col } = piece.currentSquare;\n\n  const direction =\n    (piece.color === PlayerColor.WHITE ? -1 : 1) * (isBoardFlipped ? -1 : 1);\n\n  const backRank = isBoardFlipped\n    ? piece.color === PlayerColor.WHITE\n      ? 7\n      : 0\n    : piece.color === PlayerColor.WHITE\n    ? 0\n    : 7;\n\n  const startingRow = isBoardFlipped\n    ? piece.color === PlayerColor.WHITE\n      ? 1\n      : 6\n    : piece.color === PlayerColor.WHITE\n    ? 6\n    : 1;\n\n  const rowBeforePromotionRow = isBoardFlipped\n    ? piece.color === PlayerColor.WHITE\n      ? 6\n      : 1\n    : piece.color === PlayerColor.WHITE\n    ? 1\n    : 6;\n\n  const addNormalMoves = (\n    row: number,\n    col: number,\n    direction: number,\n    backRank: number,\n    piece: Piece,\n    board: Square[][],\n    legalMoves: Move[]\n  ) => {\n    const newRow = row + direction;\n    if (newRow !== backRank && isEmpty(board, newRow, col)) {\n      legalMoves.push(\n        createStandardMove(\n          piece,\n          createSquare(row, col),\n          createSquare(newRow, col, piece)\n        )\n      );\n    }\n  };\n\n  const addDoubleMove = (\n    row: number,\n    col: number,\n    direction: number,\n    startingRow: number,\n    piece: Piece,\n    board: Square[][],\n    legalMoves: Move[]\n  ) => {\n    const newRow = row + 2 * direction;\n    if (\n      row === startingRow &&\n      isEmpty(board, row + direction, col) &&\n      isEmpty(board, newRow, col)\n    ) {\n      legalMoves.push(\n        createStandardMove(\n          piece,\n          createSquare(row, col),\n          createSquare(newRow, col, piece)\n        )\n      );\n    }\n  };\n\n  const addCaptureMoves = (\n    row: number,\n    col: number,\n    direction: number,\n    backRank: number,\n    piece: Piece,\n    board: Square[][],\n    legalMoves: Move[]\n  ) => {\n    [-1, 1].forEach((colOffset) => {\n      const newRow = row + direction;\n      const newCol = col + colOffset;\n      if (newRow >= 0 && newRow <= 7 && newCol >= 0 && newCol <= 7) {\n        const targetSquare = createSquare(newRow, newCol);\n        const targetPiece = getPieceAt(board, newRow, newCol);\n        const capturedPiece =\n          targetPiece && targetPiece.color !== piece.color\n            ? targetPiece\n            : undefined;\n        if (capturedPiece && newRow === backRank) {\n          return;\n        }\n        capturedPiece &&\n          legalMoves.push(\n            createStandardMove(\n              piece,\n              createSquare(row, col, piece),\n              targetSquare,\n              capturedPiece\n            )\n          );\n      }\n    });\n  };\n\n  const addEnPassantMoves = (\n    row: number,\n    col: number,\n    piece: Piece,\n    board: Square[][],\n    moveHistory: Move[] | undefined,\n    legalMoves: Move[]\n  ) => {\n    if (!moveHistory) {\n      return;\n    }\n    const enPassantStartingRow = isBoardFlipped\n      ? piece.color === PlayerColor.WHITE\n        ? 6\n        : 1\n      : piece.color === PlayerColor.WHITE\n      ? 1\n      : 6;\n\n    const enPassantEndRow = isBoardFlipped\n      ? piece.color === PlayerColor.WHITE\n        ? 4\n        : 3\n      : piece.color === PlayerColor.WHITE\n      ? 3\n      : 4;\n\n    const lastMove = moveHistory[moveHistory.length - 1];\n\n    if (\n      lastMove &&\n      lastMove.piece.type === PieceType.PAWN &&\n      lastMove.from.row === enPassantStartingRow &&\n      lastMove.to.row === enPassantEndRow &&\n      row === enPassantEndRow &&\n      Math.abs(col - lastMove.to.col) === 1\n    ) {\n      const currentSquare: Square = { row, col };\n      const targetSquare: Square = {\n        row: row + direction,\n        col: lastMove.to.col,\n        piece,\n      };\n      const capturedPiece = board[lastMove.to.row][lastMove.to.col].piece;\n      if (capturedPiece) {\n        const tempMove = createEnPassantMove(\n          piece,\n          currentSquare,\n          targetSquare,\n          capturedPiece.currentSquare,\n          capturedPiece\n        );\n        legalMoves.push(tempMove);\n      }\n    }\n  };\n\n  const addPromotionMoves = (\n    row: number,\n    col: number,\n    piece: Piece,\n    board: Square[][],\n    legalMoves: Move[]\n  ) => {\n    const forwardSquare: Square = { row: row + direction, col };\n\n    if (row === rowBeforePromotionRow) {\n      if (!board[forwardSquare.row][forwardSquare.col].piece) {\n        Object.values(PieceType).forEach((promotionType) => {\n          if (\n            promotionType !== PieceType.PAWN &&\n            promotionType !== PieceType.KING\n          ) {\n            const promotionMove = createPromotionMove(\n              piece,\n              { row, col, piece },\n              forwardSquare,\n              promotionType\n            );\n            legalMoves.push(promotionMove);\n          }\n        });\n      }\n\n      [-1, 1].forEach((colOffset) => {\n        const newCol = col + colOffset;\n        let capturedPiece: Piece | undefined;\n        if (newCol >= 0 && newCol < 8) {\n          capturedPiece = board[forwardSquare.row][newCol].piece;\n        }\n        if (capturedPiece && capturedPiece.color !== piece.color) {\n          Object.values(PieceType).forEach((promotionType) => {\n            if (\n              promotionType !== PieceType.PAWN &&\n              promotionType !== PieceType.KING\n            ) {\n              const promotionMove = createPromotionMove(\n                piece,\n                { row, col },\n                { row: forwardSquare.row, col: newCol, piece },\n                promotionType,\n                capturedPiece\n              );\n              legalMoves.push(promotionMove);\n            }\n          });\n        }\n      });\n    }\n  };\n\n  addNormalMoves(row, col, direction, backRank, piece, board, legalMoves);\n  addDoubleMove(row, col, direction, startingRow, piece, board, legalMoves);\n  addCaptureMoves(row, col, direction, backRank, piece, board, legalMoves);\n  addEnPassantMoves(row, col, piece, board, moveHistory, legalMoves);\n  addPromotionMoves(row, col, piece, board, legalMoves);\n\n  return legalMoves;\n};\n"],"names":[],"mappings":";;;AAAA;AAQA;AAAA;AAAA;AAAA;;;AASO,MAAM,uBAAyC,CACpD,OACA,OACA,gBACA;IAEA,MAAM,aAAqB,EAAE;IAC7B,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,aAAa;IAExC,MAAM,YACJ,CAAC,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;IAEzE,MAAM,WAAW,iBACb,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GAC/B,IACA,IACF,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GACjC,IACA;IAEJ,MAAM,cAAc,iBAChB,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GAC/B,IACA,IACF,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GACjC,IACA;IAEJ,MAAM,wBAAwB,iBAC1B,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GAC/B,IACA,IACF,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GACjC,IACA;IAEJ,MAAM,iBAAiB,CACrB,KACA,KACA,WACA,UACA,OACA,OACA;QAEA,MAAM,SAAS,MAAM;QACrB,IAAI,WAAW,YAAY,CAAA,GAAA,oJAAA,CAAA,UAAO,AAAD,EAAE,OAAO,QAAQ,MAAM;YACtD,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAClB,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,KAAK;QAGhC;IACF;IAEA,MAAM,gBAAgB,CACpB,KACA,KACA,WACA,aACA,OACA,OACA;QAEA,MAAM,SAAS,MAAM,IAAI;QACzB,IACE,QAAQ,eACR,CAAA,GAAA,oJAAA,CAAA,UAAO,AAAD,EAAE,OAAO,MAAM,WAAW,QAChC,CAAA,GAAA,oJAAA,CAAA,UAAO,AAAD,EAAE,OAAO,QAAQ,MACvB;YACA,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAClB,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,KAAK;QAGhC;IACF;IAEA,MAAM,kBAAkB,CACtB,KACA,KACA,WACA,UACA,OACA,OACA;QAEA;YAAC,CAAC;YAAG;SAAE,CAAC,OAAO,CAAC,CAAC;YACf,MAAM,SAAS,MAAM;YACrB,MAAM,SAAS,MAAM;YACrB,IAAI,UAAU,KAAK,UAAU,KAAK,UAAU,KAAK,UAAU,GAAG;gBAC5D,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ;gBAC1C,MAAM,cAAc,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE,OAAO,QAAQ;gBAC9C,MAAM,gBACJ,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,GAC5C,cACA;gBACN,IAAI,iBAAiB,WAAW,UAAU;oBACxC;gBACF;gBACA,iBACE,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,QACvB,cACA;YAGR;QACF;IACF;IAEA,MAAM,oBAAoB,CACxB,KACA,KACA,OACA,OACA,aACA;QAEA,IAAI,CAAC,aAAa;YAChB;QACF;QACA,MAAM,uBAAuB,iBACzB,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GAC/B,IACA,IACF,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GACjC,IACA;QAEJ,MAAM,kBAAkB,iBACpB,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GAC/B,IACA,IACF,MAAM,KAAK,KAAK,oJAAA,CAAA,cAAW,CAAC,KAAK,GACjC,IACA;QAEJ,MAAM,WAAW,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE;QAEpD,IACE,YACA,SAAS,KAAK,CAAC,IAAI,KAAK,oJAAA,CAAA,YAAS,CAAC,IAAI,IACtC,SAAS,IAAI,CAAC,GAAG,KAAK,wBACtB,SAAS,EAAE,CAAC,GAAG,KAAK,mBACpB,QAAQ,mBACR,KAAK,GAAG,CAAC,MAAM,SAAS,EAAE,CAAC,GAAG,MAAM,GACpC;YACA,MAAM,gBAAwB;gBAAE;gBAAK;YAAI;YACzC,MAAM,eAAuB;gBAC3B,KAAK,MAAM;gBACX,KAAK,SAAS,EAAE,CAAC,GAAG;gBACpB;YACF;YACA,MAAM,gBAAgB,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK;YACnE,IAAI,eAAe;gBACjB,MAAM,WAAW,CAAA,GAAA,mJAAA,CAAA,sBAAmB,AAAD,EACjC,OACA,eACA,cACA,cAAc,aAAa,EAC3B;gBAEF,WAAW,IAAI,CAAC;YAClB;QACF;IACF;IAEA,MAAM,oBAAoB,CACxB,KACA,KACA,OACA,OACA;QAEA,MAAM,gBAAwB;YAAE,KAAK,MAAM;YAAW;QAAI;QAE1D,IAAI,QAAQ,uBAAuB;YACjC,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,KAAK,EAAE;gBACtD,OAAO,MAAM,CAAC,oJAAA,CAAA,YAAS,EAAE,OAAO,CAAC,CAAC;oBAChC,IACE,kBAAkB,oJAAA,CAAA,YAAS,CAAC,IAAI,IAChC,kBAAkB,oJAAA,CAAA,YAAS,CAAC,IAAI,EAChC;wBACA,MAAM,gBAAgB,CAAA,GAAA,mJAAA,CAAA,sBAAmB,AAAD,EACtC,OACA;4BAAE;4BAAK;4BAAK;wBAAM,GAClB,eACA;wBAEF,WAAW,IAAI,CAAC;oBAClB;gBACF;YACF;YAEA;gBAAC,CAAC;gBAAG;aAAE,CAAC,OAAO,CAAC,CAAC;gBACf,MAAM,SAAS,MAAM;gBACrB,IAAI;gBACJ,IAAI,UAAU,KAAK,SAAS,GAAG;oBAC7B,gBAAgB,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK;gBACxD;gBACA,IAAI,iBAAiB,cAAc,KAAK,KAAK,MAAM,KAAK,EAAE;oBACxD,OAAO,MAAM,CAAC,oJAAA,CAAA,YAAS,EAAE,OAAO,CAAC,CAAC;wBAChC,IACE,kBAAkB,oJAAA,CAAA,YAAS,CAAC,IAAI,IAChC,kBAAkB,oJAAA,CAAA,YAAS,CAAC,IAAI,EAChC;4BACA,MAAM,gBAAgB,CAAA,GAAA,mJAAA,CAAA,sBAAmB,AAAD,EACtC,OACA;gCAAE;gCAAK;4BAAI,GACX;gCAAE,KAAK,cAAc,GAAG;gCAAE,KAAK;gCAAQ;4BAAM,GAC7C,eACA;4BAEF,WAAW,IAAI,CAAC;wBAClB;oBACF;gBACF;YACF;QACF;IACF;IAEA,eAAe,KAAK,KAAK,WAAW,UAAU,OAAO,OAAO;IAC5D,cAAc,KAAK,KAAK,WAAW,aAAa,OAAO,OAAO;IAC9D,gBAAgB,KAAK,KAAK,WAAW,UAAU,OAAO,OAAO;IAC7D,kBAAkB,KAAK,KAAK,OAAO,OAAO,aAAa;IACvD,kBAAkB,KAAK,KAAK,OAAO,OAAO;IAE1C,OAAO;AACT"}},
    {"offset": {"line": 464, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/strategies/queenMovementStrategy.ts"],"sourcesContent":["import { MovementStrategy, Move } from \"../../types\";\nimport { createStandardMove, createSquare, getPieceAt } from \"../index\";\n\nexport const queenMovementStrategy: MovementStrategy = (board, piece) => {\n  let legalMoves: Move[] = [];\n  let row = piece.currentSquare.row;\n  let col = piece.currentSquare.col;\n\n  const directions = [\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1],\n  ];\n\n  directions.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      const targetSquare = createSquare(newRow, newCol, piece);\n      const targetPiece = getPieceAt(board, newRow, newCol);\n      const capturedPiece =\n        targetPiece && targetPiece.color !== piece.color\n          ? targetPiece\n          : undefined;\n      if (targetPiece && targetPiece.color === piece.color) {\n        break;\n      }\n      legalMoves.push(\n        createStandardMove(\n          piece,\n          piece.currentSquare,\n          targetSquare,\n          capturedPiece\n        )\n      );\n      if (capturedPiece) {\n        break;\n      }\n\n      newRow += dRow;\n      newCol += dCol;\n    }\n  });\n\n  return legalMoves;\n};\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;;AAEO,MAAM,wBAA0C,CAAC,OAAO;IAC7D,IAAI,aAAqB,EAAE;IAC3B,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IACjC,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IAEjC,MAAM,aAAa;QACjB;YAAC;YAAG;SAAE;QACN;YAAC;YAAG;SAAE;QACN;YAAC,CAAC;YAAG;SAAE;QACP;YAAC;YAAG,CAAC;SAAE;QACP;YAAC;YAAG;SAAE;QACN;YAAC;YAAG,CAAC;SAAE;QACP;YAAC,CAAC;YAAG;SAAE;QACP;YAAC,CAAC;YAAG,CAAC;SAAE;KACT;IAED,WAAW,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK;QAC9B,IAAI,SAAS,MAAM;QACnB,IAAI,SAAS,MAAM;QAEnB,MAAO,UAAU,KAAK,SAAS,KAAK,UAAU,KAAK,SAAS,EAAG;YAC7D,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,QAAQ;YAClD,MAAM,cAAc,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE,OAAO,QAAQ;YAC9C,MAAM,gBACJ,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,GAC5C,cACA;YACN,IAAI,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,EAAE;gBACpD;YACF;YACA,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,MAAM,aAAa,EACnB,cACA;YAGJ,IAAI,eAAe;gBACjB;YACF;YAEA,UAAU;YACV,UAAU;QACZ;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/strategies/rookMovementStrategy.ts"],"sourcesContent":["import { MovementStrategy, Move } from \"../../types\";\nimport { createStandardMove, getPieceAt, createSquare } from \"../index\";\n\nexport const rookMovementStrategy: MovementStrategy = (board, piece) => {\n  let legalMoves: Move[] = [];\n  let row = piece.currentSquare.row;\n  let col = piece.currentSquare.col;\n\n  const directions = [\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n  ];\n\n  directions.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      const targetSquare = createSquare(newRow, newCol, piece);\n      const targetPiece = getPieceAt(board, newRow, newCol);\n      const capturedPiece =\n        targetPiece && targetPiece.color !== piece.color\n          ? targetPiece\n          : undefined;\n      if (targetPiece && targetPiece.color === piece.color) {\n        break;\n      }\n      legalMoves.push(\n        createStandardMove(\n          piece,\n          piece.currentSquare,\n          targetSquare,\n          capturedPiece\n        )\n      );\n      if (capturedPiece) {\n        break;\n      }\n\n      newRow += dRow;\n      newCol += dCol;\n    }\n  });\n\n  return legalMoves;\n};\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;;AAEO,MAAM,uBAAyC,CAAC,OAAO;IAC5D,IAAI,aAAqB,EAAE;IAC3B,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IACjC,IAAI,MAAM,MAAM,aAAa,CAAC,GAAG;IAEjC,MAAM,aAAa;QACjB;YAAC;YAAG;SAAE;QACN;YAAC;YAAG;SAAE;QACN;YAAC,CAAC;YAAG;SAAE;QACP;YAAC;YAAG,CAAC;SAAE;KACR;IAED,WAAW,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK;QAC9B,IAAI,SAAS,MAAM;QACnB,IAAI,SAAS,MAAM;QAEnB,MAAO,UAAU,KAAK,SAAS,KAAK,UAAU,KAAK,SAAS,EAAG;YAC7D,MAAM,eAAe,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,QAAQ,QAAQ;YAClD,MAAM,cAAc,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE,OAAO,QAAQ;YAC9C,MAAM,gBACJ,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,GAC5C,cACA;YACN,IAAI,eAAe,YAAY,KAAK,KAAK,MAAM,KAAK,EAAE;gBACpD;YACF;YACA,WAAW,IAAI,CACb,CAAA,GAAA,mJAAA,CAAA,qBAAkB,AAAD,EACf,OACA,MAAM,aAAa,EACnB,cACA;YAGJ,IAAI,eAAe;gBACjB;YACF;YAEA,UAAU;YACV,UAAU;QACZ;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 614, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/board.ts"],"sourcesContent":["import { Piece, Square, PieceType, MovementStrategy } from \"../types\";\nimport { createSquare } from \"./square\";\nimport {\n  rookMovementStrategy,\n  knightMovementStrategy,\n  bishopMovementStrategy,\n  queenMovementStrategy,\n  kingMovementStrategy,\n  pawnMovementStrategy,\n} from \"./strategies\";\n\ntype PieceSetup = {\n  type: PieceType;\n  positions: { row: number; col: number }[];\n  movementStrategy: MovementStrategy;\n};\n\nexport const defaultBoard = (): Square[][] => {\n  return Array.from({ length: 8 }, (_, row) =>\n    Array.from({ length: 8 }, (_, col) => createSquare(row, col, undefined))\n  );\n};\n\nexport const setupPieces = (isBoardFlipped: boolean): PieceSetup[] => [\n  {\n    type: PieceType.ROOK,\n    positions: [\n      { row: 0, col: 0 },\n      { row: 0, col: 7 },\n    ],\n    movementStrategy: rookMovementStrategy,\n  },\n  {\n    type: PieceType.KNIGHT,\n    positions: [\n      { row: 0, col: 1 },\n      { row: 0, col: 6 },\n    ],\n    movementStrategy: knightMovementStrategy,\n  },\n  {\n    type: PieceType.BISHOP,\n    positions: [\n      { row: 0, col: 2 },\n      { row: 0, col: 5 },\n    ],\n    movementStrategy: bishopMovementStrategy,\n  },\n  {\n    type: PieceType.QUEEN,\n    positions: isBoardFlipped ? [{ row: 0, col: 4 }] : [{ row: 0, col: 3 }],\n    movementStrategy: queenMovementStrategy,\n  },\n  {\n    type: PieceType.KING,\n    positions: isBoardFlipped ? [{ row: 0, col: 3 }] : [{ row: 0, col: 4 }],\n    movementStrategy: kingMovementStrategy,\n  },\n  {\n    type: PieceType.PAWN,\n    positions: Array.from({ length: 8 }, (_, col) => ({ row: 1, col })),\n    movementStrategy: pawnMovementStrategy,\n  },\n];\n\nexport const getPieceAt = (\n  board: Square[][],\n  row: number,\n  col: number\n): Piece | undefined => {\n  return board[row][col].piece;\n};\n\nexport const isEmpty = (\n  board: Square[][],\n  row: number,\n  col: number\n): boolean => {\n  return !board[row][col].piece;\n};\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAeO,MAAM,eAAe;IAC1B,OAAO,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAE,GAAG,CAAC,GAAG,MACnC,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAE,GAAG,CAAC,GAAG,MAAQ,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK;AAEjE;AAEO,MAAM,cAAc,CAAC,iBAA0C;QACpE;YACE,MAAM,oJAAA,CAAA,YAAS,CAAC,IAAI;YACpB,WAAW;gBACT;oBAAE,KAAK;oBAAG,KAAK;gBAAE;gBACjB;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAClB;YACD,kBAAkB,iLAAA,CAAA,uBAAoB;QACxC;QACA;YACE,MAAM,oJAAA,CAAA,YAAS,CAAC,MAAM;YACtB,WAAW;gBACT;oBAAE,KAAK;oBAAG,KAAK;gBAAE;gBACjB;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAClB;YACD,kBAAkB,mLAAA,CAAA,yBAAsB;QAC1C;QACA;YACE,MAAM,oJAAA,CAAA,YAAS,CAAC,MAAM;YACtB,WAAW;gBACT;oBAAE,KAAK;oBAAG,KAAK;gBAAE;gBACjB;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAClB;YACD,kBAAkB,mLAAA,CAAA,yBAAsB;QAC1C;QACA;YACE,MAAM,oJAAA,CAAA,YAAS,CAAC,KAAK;YACrB,WAAW,iBAAiB;gBAAC;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAAE,GAAG;gBAAC;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAAE;YACvE,kBAAkB,kLAAA,CAAA,wBAAqB;QACzC;QACA;YACE,MAAM,oJAAA,CAAA,YAAS,CAAC,IAAI;YACpB,WAAW,iBAAiB;gBAAC;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAAE,GAAG;gBAAC;oBAAE,KAAK;oBAAG,KAAK;gBAAE;aAAE;YACvE,kBAAkB,iLAAA,CAAA,uBAAoB;QACxC;QACA;YACE,MAAM,oJAAA,CAAA,YAAS,CAAC,IAAI;YACpB,WAAW,MAAM,IAAI,CAAC;gBAAE,QAAQ;YAAE,GAAG,CAAC,GAAG,MAAQ,CAAC;oBAAE,KAAK;oBAAG;gBAAI,CAAC;YACjE,kBAAkB,iLAAA,CAAA,uBAAoB;QACxC;KACD;AAEM,MAAM,aAAa,CACxB,OACA,KACA;IAEA,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK;AAC9B;AAEO,MAAM,UAAU,CACrB,OACA,KACA;IAEA,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK;AAC/B"}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 758, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/player.ts"],"sourcesContent":["import { Player, PlayerColor, PlayerType } from \"../types\";\n\nexport const createPlayer = (color: PlayerColor, type: PlayerType): Player => ({\n  color,\n  type,\n});\n"],"names":[],"mappings":";;;AAEO,MAAM,eAAe,CAAC,OAAoB,OAA6B,CAAC;QAC7E;QACA;IACF,CAAC"}},
    {"offset": {"line": 768, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/utils/piece.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport {\n  Player,\n  PieceType,\n  PlayerColor,\n  Square,\n  MovementStrategy,\n  Piece,\n} from \"../types\";\n\nexport const createPiece = (\n  player: Player,\n  type: PieceType,\n  color: PlayerColor,\n  currentSquare: Square,\n  movementStrategy: MovementStrategy,\n  isAlive: boolean,\n  hasMoved?: boolean\n): Piece => ({\n  id: uuidv4(),\n  player,\n  type,\n  color,\n  currentSquare,\n  movementStrategy,\n  isAlive,\n  hasMoved,\n});\n"],"names":[],"mappings":";;;AAAA;;AAUO,MAAM,cAAc,CACzB,QACA,MACA,OACA,eACA,kBACA,SACA,WACU,CAAC;QACX,IAAI,CAAA,GAAA,wLAAA,CAAA,KAAM,AAAD;QACT;QACA;QACA;QACA;QACA;QACA;QACA;IACF,CAAC"}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 798, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 826, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/hooks/useChessGame.ts"],"sourcesContent":["import { useState } from \"react\";\nimport {\n  GameState,\n  Player,\n  Piece,\n  PlayerColor,\n  PlayerType,\n  PieceType,\n} from \"../types\";\nimport { createPlayer, createPiece, defaultBoard, setupPieces } from \"../utils\";\n\nexport const useChessGame = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    board: defaultBoard(),\n    players: [\n      createPlayer(PlayerColor.WHITE, PlayerType.HUMAN),\n      createPlayer(PlayerColor.BLACK, PlayerType.HUMAN),\n    ],\n    piecesByPlayer: new Map<Player, Piece[]>(),\n    currentPlayerMoves: [],\n    capturedPieces: [],\n    isKingInCheck: false,\n    kingSquare: undefined,\n    currentPlayerIndex: 0,\n    moveHistory: [],\n    undoneMoves: [],\n    halfMoveClock: 0,\n    fullMoveNumber: 1,\n  });\n\n  const player1 = gameState.players[0];\n  const player2 = gameState.players[1];\n\n  const initializeBoard = (isBoardFlipped: boolean) => {\n    const setup = setupPieces(isBoardFlipped);\n    const newBoard = gameState.board;\n    let newPiecesByPlayer = new Map();\n\n    [PlayerColor.WHITE, PlayerColor.BLACK].forEach((color) => {\n      const isWhite = color === PlayerColor.WHITE;\n      const rowOffset = isBoardFlipped ? (isWhite ? 0 : 7) : isWhite ? 7 : 0;\n      const pawnRow = isBoardFlipped ? (isWhite ? 1 : 6) : isWhite ? 6 : 1;\n\n      setup.forEach(({ type, positions, movementStrategy }) => {\n        positions.forEach(({ row, col }) => {\n          const player = color === PlayerColor.WHITE ? player1 : player2;\n          const pieceRow =\n            row + (type === PieceType.PAWN ? pawnRow - 1 : rowOffset);\n          const square = gameState.board[pieceRow][col];\n          const hasMoved =\n            type === PieceType.ROOK || type === PieceType.KING\n              ? false\n              : undefined;\n\n          const piece = createPiece(\n            player,\n            type,\n            color,\n            square,\n            movementStrategy,\n            true,\n            hasMoved\n          );\n\n          newBoard[pieceRow][col].piece = piece;\n          const playerPieces = newPiecesByPlayer.get(player) || [];\n          newPiecesByPlayer.set(player, [...playerPieces, piece]);\n        });\n      });\n    });\n\n    setGameState((prevState) => ({\n      ...prevState,\n      board: newBoard,\n      piecesByPlayer: newPiecesByPlayer,\n    }));\n  };\n\n  return {\n    ...gameState,\n    initializeBoard,\n  };\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;;;;;AAEO,MAAM,eAAe;;IAC1B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAa;QACpD,OAAO,CAAA,GAAA,oJAAA,CAAA,eAAY,AAAD;QAClB,SAAS;YACP,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,oJAAA,CAAA,cAAW,CAAC,KAAK,EAAE,oJAAA,CAAA,aAAU,CAAC,KAAK;YAChD,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD,EAAE,oJAAA,CAAA,cAAW,CAAC,KAAK,EAAE,oJAAA,CAAA,aAAU,CAAC,KAAK;SACjD;QACD,gBAAgB,IAAI;QACpB,oBAAoB,EAAE;QACtB,gBAAgB,EAAE;QAClB,eAAe;QACf,YAAY;QACZ,oBAAoB;QACpB,aAAa,EAAE;QACf,aAAa,EAAE;QACf,eAAe;QACf,gBAAgB;IAClB;IAEA,MAAM,UAAU,UAAU,OAAO,CAAC,EAAE;IACpC,MAAM,UAAU,UAAU,OAAO,CAAC,EAAE;IAEpC,MAAM,kBAAkB,CAAC;QACvB,MAAM,QAAQ,CAAA,GAAA,oJAAA,CAAA,cAAW,AAAD,EAAE;QAC1B,MAAM,WAAW,UAAU,KAAK;QAChC,IAAI,oBAAoB,IAAI;QAE5B;YAAC,oJAAA,CAAA,cAAW,CAAC,KAAK;YAAE,oJAAA,CAAA,cAAW,CAAC,KAAK;SAAC,CAAC,OAAO,CAAC,CAAC;YAC9C,MAAM,UAAU,UAAU,oJAAA,CAAA,cAAW,CAAC,KAAK;YAC3C,MAAM,YAAY,iBAAkB,UAAU,IAAI,IAAK,UAAU,IAAI;YACrE,MAAM,UAAU,iBAAkB,UAAU,IAAI,IAAK,UAAU,IAAI;YAEnE,MAAM,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,gBAAgB,EAAE;gBAClD,UAAU,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;oBAC7B,MAAM,SAAS,UAAU,oJAAA,CAAA,cAAW,CAAC,KAAK,GAAG,UAAU;oBACvD,MAAM,WACJ,MAAM,CAAC,SAAS,oJAAA,CAAA,YAAS,CAAC,IAAI,GAAG,UAAU,IAAI,SAAS;oBAC1D,MAAM,SAAS,UAAU,KAAK,CAAC,SAAS,CAAC,IAAI;oBAC7C,MAAM,WACJ,SAAS,oJAAA,CAAA,YAAS,CAAC,IAAI,IAAI,SAAS,oJAAA,CAAA,YAAS,CAAC,IAAI,GAC9C,QACA;oBAEN,MAAM,QAAQ,CAAA,GAAA,oJAAA,CAAA,cAAW,AAAD,EACtB,QACA,MACA,OACA,QACA,kBACA,MACA;oBAGF,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG;oBAChC,MAAM,eAAe,kBAAkB,GAAG,CAAC,WAAW,EAAE;oBACxD,kBAAkB,GAAG,CAAC,QAAQ;2BAAI;wBAAc;qBAAM;gBACxD;YACF;QACF;QAEA,aAAa,CAAC,YAAc,CAAC;gBAC3B,GAAG,SAAS;gBACZ,OAAO;gBACP,gBAAgB;YAClB,CAAC;IACH;IAEA,OAAO;QACL,GAAG,SAAS;QACZ;IACF;AACF;GAvEa"}},
    {"offset": {"line": 902, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 908, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/components/board/ChessPiece.tsx"],"sourcesContent":["import { useDraggable } from \"@dnd-kit/core\";\nimport { Piece, PieceType, PlayerColor } from \"../../types\";\n\ntype ChessPieceProps = {\n  piece: Piece;\n  type: PieceType;\n  color: PlayerColor;\n  square: number[];\n};\n\nexport const ChessPiece = ({ piece, type, color, square }: ChessPieceProps) => {\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\n    id: `${type}-${square[0]}-${square[1]}`,\n  });\n  const style = transform\n    ? {\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n      }\n    : undefined;\n\n  return (\n    <img\n      className=\"h-3/4 z-10 select-none\"\n      ref={setNodeRef}\n      style={style}\n      {...listeners}\n      {...attributes}\n      src={`/assets/images/${color}-${type}.svg`}\n      alt={`${type}`}\n    />\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;;;;AAUO,MAAM,aAAa,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAmB;;IACxE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;QACpE,IAAI,GAAG,KAAK,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE;IACzC;IACA,MAAM,QAAQ,YACV;QACE,WAAW,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,MAAM,CAAC;IACjE,IACA;IAEJ,qBACE,6LAAC;QACC,WAAU;QACV,KAAK;QACL,OAAO;QACN,GAAG,SAAS;QACZ,GAAG,UAAU;QACd,KAAK,CAAC,eAAe,EAAE,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC;QAC1C,KAAK,GAAG,MAAM;;;;;;AAGpB;GArBa;;QAC8C,8JAAA,CAAA,eAAY;;;KAD1D"}},
    {"offset": {"line": 949, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 955, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/components/board/ChessSquare.tsx"],"sourcesContent":["import { useDroppable } from \"@dnd-kit/core\";\nimport React from \"react\";\n\ntype SquareProps = {\n  square: number[];\n  isBoardFlipped: boolean;\n  children: React.ReactNode;\n  onSquareClick: (row: number, col: number) => void;\n};\n\nexport const ChessSquare = ({\n  square,\n  isBoardFlipped,\n  children,\n}: SquareProps) => {\n  const { isOver, setNodeRef } = useDroppable({\n    id: `droppable-${square[0]}-${square[1]}`,\n  });\n  const isDark = (square[0] + square[1]) % 2 === 0;\n  const isLabeledColumn = square[1] === 7;\n  const isLabeledRow = square[0] === 7;\n  const columnLabel = isBoardFlipped ? 1 + square[0] : 8 - square[0];\n  const rowLabel = isBoardFlipped\n    ? String.fromCharCode(104 - square[1])\n    : String.fromCharCode(97 + square[1]);\n\n  const getColor = (isDark: boolean) => {\n    return isOver ? \"bg-green-500\" : isDark ? \"bg-orange-200\" : \"bg-yellow-900\";\n  };\n\n  return (\n    <div\n      className={`relative flex justify-center items-center w-full h-full aspect-square ${getColor(\n        isDark\n      )}`}\n      ref={setNodeRef}\n    >\n      {children}\n      {isLabeledColumn && (\n        <div\n          className={`absolute top-0 right-0 pt-1 pr-1 text-xs lg:text-sm ${\n            isDark ? \"text-yellow-900\" : \"text-orange-200\"\n          } select-none`}\n        >\n          {columnLabel}\n        </div>\n      )}\n      {isLabeledRow && (\n        <div\n          className={`absolute bottom-0 left-0 pl-1 text-xs lg:text-sm ${\n            isDark ? \"text-yellow-900\" : \"text-orange-200\"\n          } select-none`}\n        >\n          {rowLabel}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;;;;AAUO,MAAM,cAAc,CAAC,EAC1B,MAAM,EACN,cAAc,EACd,QAAQ,EACI;;IACZ,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAD,EAAE;QAC1C,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE;IAC3C;IACA,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,MAAM;IAC/C,MAAM,kBAAkB,MAAM,CAAC,EAAE,KAAK;IACtC,MAAM,eAAe,MAAM,CAAC,EAAE,KAAK;IACnC,MAAM,cAAc,iBAAiB,IAAI,MAAM,CAAC,EAAE,GAAG,IAAI,MAAM,CAAC,EAAE;IAClE,MAAM,WAAW,iBACb,OAAO,YAAY,CAAC,MAAM,MAAM,CAAC,EAAE,IACnC,OAAO,YAAY,CAAC,KAAK,MAAM,CAAC,EAAE;IAEtC,MAAM,WAAW,CAAC;QAChB,OAAO,SAAS,iBAAiB,SAAS,kBAAkB;IAC9D;IAEA,qBACE,6LAAC;QACC,WAAW,CAAC,sEAAsE,EAAE,SAClF,SACC;QACH,KAAK;;YAEJ;YACA,iCACC,6LAAC;gBACC,WAAW,CAAC,oDAAoD,EAC9D,SAAS,oBAAoB,kBAC9B,YAAY,CAAC;0BAEb;;;;;;YAGJ,8BACC,6LAAC;gBACC,WAAW,CAAC,iDAAiD,EAC3D,SAAS,oBAAoB,kBAC9B,YAAY,CAAC;0BAEb;;;;;;;;;;;;AAKX;GAhDa;;QAKoB,8JAAA,CAAA,eAAY;;;KALhC"}},
    {"offset": {"line": 1015, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1021, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/components/board/Board.tsx"],"sourcesContent":["import { DndContext } from \"@dnd-kit/core\";\nimport { Square } from \"../../types\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { ChessSquare } from \"./ChessSquare\";\nimport { useState } from \"react\";\n\ntype BoardProps = {\n  board: Square[][];\n  isBoardFlipped: boolean;\n};\n\nexport const Board = ({ board, isBoardFlipped }: BoardProps) => {\n  const [parent, setParent] = useState(null);\n\n  const handlePieceSelection = (row: number, col: number) => {};\n\n  return (\n    <DndContext>\n      <div\n        id=\"chessboard\"\n        className=\"relative grid grid-cols-8 w-[90vmin] h-[90vmin] lg:w-[70vmin] lg:h-[70vmin]\"\n      >\n        {board.map((row, rowIndex) =>\n          row.map((square, colIndex) => (\n            <ChessSquare\n              key={`${rowIndex}-${colIndex}`}\n              square={[rowIndex, colIndex]}\n              isBoardFlipped={isBoardFlipped}\n              onSquareClick={handlePieceSelection}\n            >\n              {square.piece && square.piece.isAlive && (\n                <ChessPiece\n                  type={square.piece.type}\n                  color={square.piece.color}\n                  piece={square.piece}\n                  square={[rowIndex, colIndex]}\n                />\n              )}\n            </ChessSquare>\n          ))\n        )}\n      </div>\n    </DndContext>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;AAOO,MAAM,QAAQ,CAAC,EAAE,KAAK,EAAE,cAAc,EAAc;;IACzD,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,MAAM,uBAAuB,CAAC,KAAa,OAAiB;IAE5D,qBACE,6LAAC,8JAAA,CAAA,aAAU;kBACT,cAAA,6LAAC;YACC,IAAG;YACH,WAAU;sBAET,MAAM,GAAG,CAAC,CAAC,KAAK,WACf,IAAI,GAAG,CAAC,CAAC,QAAQ,yBACf,6LAAC,yKAAA,CAAA,cAAW;wBAEV,QAAQ;4BAAC;4BAAU;yBAAS;wBAC5B,gBAAgB;wBAChB,eAAe;kCAEd,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,kBACnC,6LAAC,wKAAA,CAAA,aAAU;4BACT,MAAM,OAAO,KAAK,CAAC,IAAI;4BACvB,OAAO,OAAO,KAAK,CAAC,KAAK;4BACzB,OAAO,OAAO,KAAK;4BACnB,QAAQ;gCAAC;gCAAU;6BAAS;;;;;;uBAV3B,GAAG,SAAS,CAAC,EAAE,UAAU;;;;;;;;;;;;;;;AAmB5C;GAjCa;KAAA"}},
    {"offset": {"line": 1086, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1092, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelohare/workspace/react-chess-rewrite/src/app/projects/chess/components/ui/ChessGameContainer.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useChessGame } from \"../../hooks/useChessGame\";\nimport { Board } from \"../board/Board\";\n\nexport const ChessGameContainer = () => {\n  const gameManager = useChessGame();\n  const [isBoardFlipped, setisBoardFlipped] = useState(false);\n\n  useEffect(() => {\n    gameManager.initializeBoard(isBoardFlipped);\n  }, []);\n\n  return (\n    <div className=\"flex flex-col justify-center lg:flex-row\">\n      <div className=\"flex justify-center items-center\">\n        <Board board={gameManager.board} isBoardFlipped={isBoardFlipped} />\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMO,MAAM,qBAAqB;;IAChC,MAAM,cAAc,CAAA,GAAA,2JAAA,CAAA,eAAY,AAAD;IAC/B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAErD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;wCAAE;YACR,YAAY,eAAe,CAAC;QAC9B;uCAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC,mKAAA,CAAA,QAAK;gBAAC,OAAO,YAAY,KAAK;gBAAE,gBAAgB;;;;;;;;;;;;;;;;AAIzD;GAfa;;QACS,2JAAA,CAAA,eAAY;;;KADrB"}},
    {"offset": {"line": 1148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}